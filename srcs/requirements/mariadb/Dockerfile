
FROM alpine:3.18

# 빌드 시에 전달될 인수(argument)를 정의 /  Dockerfile 내에서 사용되는 변수를 정의하는 지시문
# 이 인수들은 컨테이너 내에서 사용할 데이터베이스 이름, 사용자 이름, 패스워드, 호스트 정보 등을 설정할 때 사용
# ARG DB_USER \
#     DB_NAME \
#     DB_PASS \
#     DB_HOST

RUN apk update && apk upgrade && \
# 이 명령은 Alpine Linux 패키지 관리자의 패키지 색인을 업데이트 이를 통해 사용 가능한 최신 버전의 소프트웨어 패키지를 확인할 수 있다
# 이 명령은 현재 시스템에 설치된 모든 패키지를 최신 버전으로 업그레이드 새로운 버전의 패키지를 설치하고 이전 버전의 패키지를 제거
	apk add --no-cache mariadb-client dumb-init mariadb && \
# 이 명령은 Mariadb 데이터베이스 서버와 클라이언트를 설치하고, 또한 초기화 및 프로세스 관리를 위해 dumb-init을 설치 --no-cache 옵션은 패키지를 다운로드할 때 캐시를 사용하지 않도록 합니다.
    mkdir /run/mysqld && \
# 이 명령은 MariaDB가 실행 중인 동안에 사용될 디렉터리를 생성합니다. 일반적으로 MariaDB는 이 디렉터리를 소켓 및 기타 임시 파일을 저장하는 데 사용
    chmod 777 /run/mysqld && \
# 이 명령은 /run/mysqld 디렉터리에 모든 사용자에게 읽기, 쓰기 및 실행 권한을 부여 이는 MariaDB 프로세스가 해당 디렉터리에 대한 액세스 권한을 가질 수 있도록한다
    sed -i "s|skip-networking|skip-networking=0|g" /etc/my.cnf.d/mariadb-server.cnf && \
# 이 명령은 MariaDB 설정 파일인 mariadb-server.cnf에서 skip-networking 옵션을 찾아서 해당 값을 0으로 변경 이를 통해 MariaDB가 네트워크 연결을 허용하도록 설정
# 이걸 해야 외부랑 소통가능
    sed -i "s/#bind-address=0.0.0.0/bind-address=0.0.0.0/g" /etc/my.cnf.d/mariadb-server.cnf
#  이 명령은 MariaDB 설정 파일에서 주석 처리된 bind-address 옵션을 찾아서 주석 처리를 제거하고, 주소를 0.0.0.0으로 변경 이는 MariaDB가 모든 네트워크 인터페이스에서 연결을 수락하도록 설정

EXPOSE 3306
#EXPOSE로 노출된 포트는 Docker 네트워크를 통해 다른 컨테이너와 통신할 수 있다
# 컨테이너가 다른 외부 컨테이너랑 소통할때 자신을 나타내는 전화번호같은거 마리아디비 기본적인 포트번호를 3306

# 호스트의 tools/db-set.sh 파일을 컨테이너 내부의 /db-set.sh 경로로 복사
# 이 스크립트는 데이터베이스 초기화 및 설정을 위한 스크립트일 것으로 예상
COPY tools/db-set.sh /db-set.sh
# 명령은 Docker 이미지 내부에 있는 파일을 복사하는 역할 이 경우 tools 디렉토리에 있는 db-set.sh 파일을 Docker 이미지의 루트 디렉토리에 있는 db-set.sh로 복사

# 로컬에 이미 있는 쉘 스크립트 파일을 컨테이너 안으로 db-set.sh로 복사시키는


# 이 명령은 이후의 명령들이 mysql 사용자 권한으로 실행되도록 설정

# MariaDB 컨테이너 내에서 실행되는 프로세스를 실행할 사용자를 지정 
# MariaDB 이미지는 일반적으로 'mysql' 사용자로 설정되어 있으며, 이 사용자가 MariaDB 프로세스를 실행하도록 권장

# 보안 및 권한 관리를 위해 컨테이너 내에서 특정 사용자로 프로세스를 실행하는 것이 좋은 관행입니다. 따라서 MariaDB 컨테이너의 경우, 
# MariaDB 프로세스를 실행할 사용자를 'mysql'로 지정하여 보다 안전하게 운영할 수 있습니다.

USER mysql

#  mysql == MariaDB
#  개발자는 같은데 하위버전 정도..?
# 프로세스가 실행될 때 루트가 아니라 mysql이라는 유저로 실행이 되는데
# 마리아 디비 설치시 자동으로 생성이 된다 root로 안하려고 권한이 엄청 많으니까 보안때문에 mysql로
# /*
# 여기서 USER mysql는 MariaDB 컨테이너 내부에서 실행되는 프로세스가 'mysql' 사용자로 실행됨을 의미합니다. 
# 이렇게 함으로써 MariaDB 프로세스는 보다 격리되고 보안적으로 강화됩니다. 
# 예를 들어, 프로세스가 루트(root) 사용자로 실행되는 것보다 보안 취약성을 줄일 수 있습니다.
# */


CMD ["dumb-init", "--", "/bin/sh", "/db-set.sh"]
# dumb init -> pid1을 dumb init으로 하겠다 
# pid1 프로세스가 하는일 : 좀비프로세스나 고아 프로세스의 처리도 담당.
# 저걸 안쓸경우 pid1이 bash 저것만 실행되고 꺼져버림
# sh db - init sh 쉘스크립트 실행 되고 끝나버리니까 db를 살려둘수가 없다
# 덤브와 -- 배쉬를 구분해주는 문법
# 덤브이닛의 명령어 사용법



# 커맨드는 중간에 여러개 쓸 수 있고 마지막 명령어가 마지막 커맨드가 실행되면 컨테이너가 실행

# 엔트리는 무조건 한번 얘가 시작되면 바로 컨테이너가 실행되는


# 우리는 컨테이너가 계속 실행 되게끔 만들어야하는데 
# tail f 쓰지말라해서 안썼다



# 도커 vs 가상머신
# 도커 명령어 vs 도커컴포즈 

# 도커파일에서 각 명령어(FROM RUN ENTRYPOINT 등 )에서 해주는 부분이랑 특히 엔트리포인트나 커맨드 부분에 
# 어떤걸 넘겨줘서 어떻게 실행하는지 
# 그게 서브젝트에 해키패치 tail infinity while true 얘네 쓰지말라고 했던 부분이랑 관련있어서 
# 그부분을 dumb init 이나 tiny 설치해서 어떻게 프로세스 관리해주는지 알고있으면 평가지에서 해키패치 사용부분 설명해주기 좋을 것같구


# 워드프레스 항목 보면 사용자로 로그인해서 댓글남겨봐라 이런거 있어서 
# 우리가 워드프레스 설치할때 sh 파일에 어드민 유저랑 일반유저 만든거 있어서 그거 보야주면서 
# 일반 유저로 댓글 남기고 어드민유저로 들어가서 댓글 승인하고 페이지 편집하고 그런식으로 자연스럽게 쓰윽~ 넘어가면 될 것 같구

# 그 컨테이너에서 mysql 접속하는거!! 
# 평가지에 있어서 물어보면 그부분도 해야해!! 
# 터미널에서 sudo docker exec -it <도커id - docker ps 해서 나오는거!> sh
# 이러케하면 가상머신 터미널에서 도커 컨테이너 쉘에서 실행하는건데 
# 여기서 mysql -u root -p 해서 마리아 디비로 접속하구 그 안에서 
# 데이터(워드프레스에서 쓴 댓글 등) 보여주는거 
# 할줄알아야해!! 


# 도커는 벌츄얼머신이 아니라 tailf 같은 명령어는 추천하지 않는다

# pid 1에 따라 컨테이너가 죽을수도 있는데 pid1 을 돌리는 tailf 까지 돌리면 컨테이너가 꺼졌을 경우 tailf 가 잘 마무리가 안될 수 있다


# 이 문장은 Docker 컨테이너가 가상 머신이 아니라는 점을 강조하고 있습니다. 
# 따라서 Docker 컨테이너 내에서 tail -f와 같은 명령을 사용하는 것은 권장되지 않는다고 설명하고 있습니다. 
# 이는 Docker 컨테이너가 일반적으로 가상 머신과 달리 실행되는 환경이 다르기 때문입니다.

# tail -f는 파일의 끝 부분을 지속적으로 모니터링하여 변경 사항을 출력하는 명령어입니다.
#  일반적으로 로그 파일을 실시간으로 모니터링하거나 디버깅하는 데 사용됩니다.
#   그러나 Docker 컨테이너에서는 이러한 작업을 수행하는데에는 몇 가지 문제가 있을 수 있습니다:

# 컨테이너 내 파일 시스템의 변화: Docker 컨테이너는 보통 일회성으로 실행되는데, 컨테이너가 종료되면 파일 시스템 변경 사항도 함께 사라집니다. 
# 따라서 tail -f를 사용하여 컨테이너 내의 파일을 모니터링하는 것은 컨테이너가 종료될 때까지만 유효합니다.

# 데몬 프로세스의 부재: 일반적으로 tail -f는 백그라운드에서 계속 실행되는 데몬 프로세스가 필요합니다. 
# 그러나 Docker 컨테이너는 주로 한 번 실행되고 종료되는 단일 프로세스를 실행하는 데에 사용됩니다. 따라서 tail -f와 같은 명령어는 컨테이너 내에서 지속적으로 실행되는 데몬 프로세스를 제공하지 않습니다.

# 따라서 Docker 컨테이너 내에서는 tail -f와 같은 명령어 대신에 데몬 프로세스를 실행하는 것이 보다 적절합니다.
# 데몬 프로세스는 백그라운드에서 지속적으로 실행되며, Docker 컨테이너가 종료되어도 계속해서 실행됩니다.ㅇㄹ

